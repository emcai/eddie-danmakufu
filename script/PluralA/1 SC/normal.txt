#include "shot/AllStarShot_Const.txt"
#include "script/cutin.txt"
#include "script/helper.txt"

let objBoss; //Enemy object
let objScene = GetEnemyBossSceneObjectID();
let frame = -60; //Counter for timing enemy movements.(Will keep increasing by one in @MainLoop)

@Event
{
	alternative(GetEventType())
	case (EV_REQUEST_LIFE) {
		//The script asks for the enemy's life
		SetScriptResult(500); //Setting the enemy's life to 500
	}
	case (EV_REQUEST_TIMER) {
		SetScriptResult(60);
	}
	case (EV_REQUEST_SPELL_SCORE) {
		SetScriptResult(1000000);
	}
	case (EV_PLAYER_REBIRTH) {
		deleteAll;
		frame = -20;
	}
}

@Initialize
{
	InstallFont("font/lucon.ttf");
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
	ObjEnemy_Regist(objBoss);
	ObjEnemy_SetDamageRate(objBoss, 20, 4);
	
	let cutin = "img/Hong Meiling/cutin.jpg";
	ObjCutin_LaunchS3(NAZRIN, cutin, "Normal");
	let card1 = ObjText_Create();
	ObjText_SetText(card1, "Rainbow Sign \"Flash of Colors\"");
	ObjText_SetFontSize(card1, 16);
    ObjText_SetFontType(card1, "Ludica Console");
    ObjText_SetFontBold(card1, true);
	ObjRender_SetX(card1, 80);
	ObjRender_SetY(card1, 15);

	ObjEnemyBossScene_StartSpell(objScene);

	let imgHong = "img/Hong Meiling/sprite.png";
	ObjPrim_SetTexture(objBoss, imgHong); 
	ObjSprite2D_SetSourceRect(objBoss, 0, 0, 30, 58); 
	ObjSprite2D_SetDestCenter(objBoss); 

	let cx = GetStgFrameWidth() / 2;
	ObjMove_SetDestAtFrame(objBoss, cx, 85, 20);
}

@MainLoop
{
	let ex = ObjMove_GetX(objBoss);
	let ey = ObjMove_GetY(objBoss);
	
	ObjEnemy_SetIntersectionCircleToShot(objBoss, ex, ey, 32); //hitbox against player bullets. 32 is the radius.
	ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ex, ey, 24); //hitbox against the player. 24 is the radius.
	
	frame++;
	
	if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0)
	{
		TFinalize;
	}
	
	if(frame % 35 == 0 && frame > 0){
		fire;
	}
	yield;
}

task TFinalize {
	if(ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SHOOTDOWN_COUNT)
      +ObjEnemyBossScene_GetInfo(objScene, INFO_PLAYER_SPELL_COUNT) == 0){
		AddScore(ObjEnemyBossScene_GetInfo(objScene, INFO_SPELL_SCORE));
	}
	
	Obj_Delete(objBoss);
	DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
	SetAutoDeleteObject(true);
	CloseScript(GetOwnScriptID());
	return;
}
	
task fire {
	let angleT = GetAngleToPlayer(objBoss);
	let idA = CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 2.5, angleT - 15, GLOW_BLUE, 5);
	let idB = CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 2.5, angleT, GLOW_RED, 5);
	let idC = CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 2.5, angleT + 15, GLOW_YELLOW, 5);
	
	wait(45);
	let angleCounter = 0;
	let loopCount = 18;
	loop(loopCount){
		CreateShotA1(ObjMove_GetX(objBoss) - 90*sin(45), ObjMove_GetY(objBoss) + 90*sin(45), 2, angleCounter + randRange(360 / loopCount), ICE_BLUE, 0);
		CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss) + 90, 2, angleCounter + randRange(360 / loopCount), ICE_RED, 0);
		CreateShotA1(ObjMove_GetX(objBoss) + 90*sin(45), ObjMove_GetY(objBoss) + 90*sin(45), 2, angleCounter + randRange(360 / loopCount), ICE_YELLOW, 0);
		angleCounter += (360 / loopCount);
	}
}